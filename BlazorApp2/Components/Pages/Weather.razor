@page "/weather"
@attribute [StreamRendering]
@using BlazorApp2
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject AuthenticationStateProvider AuthenticationStateProvider

<h1>Contribuyente</h1>

<p>Desarrollo</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
@* @if ()  *@
else
{
    <div style="display: flex; justify-content: flex-end; margin-bottom: 10px;">
        <NavLink class="nav-link" href="/encuesta">
            <button class="btn btn-primary" @onclick="HandleButtonClick">Agregar</button>
        </NavLink>
    </div>

    <table class="table mt-3">
        <thead>
            <tr>
                <th>NOMBRE</th>
                <th>Rnc cedula</th>
                <th>Tipo</th>
                <th>Estatus</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Juan Pérez</td>
                <td>001-234567-8</td>
                <td>Persona activa</td>
                <td>Activo</td>
            </tr>
        </tbody>
    </table>
}


@code {

#nullable disable
    private ApplicationDbContext context = default!;

        public async ValueTask DisposeAsync()
        {
            // Dispose the context
            await context.DisposeAsync();
        }
    

    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        await LoadForecastsAsync();
    }

    private async Task HandleButtonClick()
    {
        await LoadForecastsAsync();
    }

    private async Task LoadForecastsAsync()
    {
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
            {
                Date = startDate.AddDays(index),
                TemperatureC = Random.Shared.Next(-20, 55),
                Summary = summaries[Random.Shared.Next(summaries.Length)]
            }).ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
